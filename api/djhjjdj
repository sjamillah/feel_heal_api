import pandas as pd
import numpy as np
import pickle
import datetime
from sklearn.model_selection import train_test_split, GridSearchCV, KFold
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

print("\nReading dataset......")
file_path = "/content/drive/MyDrive/Colab Notebooks/Data/Health_Sleep_Statistics.csv"
data = pd.read_csv(file_path)
print("Dataset read successfully!")

print("-" * 50)
print(f"Initial Shape: {data.shape}")
print("-" * 50)
print(f"Columns: {data.columns}")

# dropping some columns
columns_to_drop = ['User ID', 'Gender', 'Dietary Habits', 'Sleep Disorders']
data = data.drop(columns=columns_to_drop)
print(f"\nDropped {len(columns_to_drop)} unnecessary columns")

# Convert categorical to numeric
medication_label_encoder = LabelEncoder()
physical_label_encoder = LabelEncoder()
data['Physical Activity Level'] = physical_label_encoder.fit_transform(data['Physical Activity Level'].str.lower())
data['Medication Usage'] = medication_label_encoder.fit_transform(data['Medication Usage'].str.lower())

# Add synthetic columns
np.random.seed(42)
num_rows = len(data)
data['Heart Rate'] = np.random.randint(60, 100, num_rows)
data['Social Interaction'] = np.random.randint(0, 5, num_rows)

# Process time columns
data['Bedtime'] = pd.to_datetime('2024-01-01 ' + data['Bedtime'])
data['Wake-up Time'] = pd.to_datetime('2024-01-01 ' + data['Wake-up Time'])
data['Sleep Duration'] = (data['Wake-up Time'] - data['Bedtime']).dt.total_seconds() / 3600
data.loc[data['Sleep Duration'] < 0, 'Sleep Duration'] += 24

# Handle missing values
numeric_data = data.select_dtypes(include=[np.number])
data[numeric_data.columns] = numeric_data.fillna(numeric_data.median())

# Validate data ranges
print("\nValidating data ranges...")

# Validate Social Interaction (0-5)
invalid_social = ~data['Social Interaction'].between(0, 5)
print(f"Invalid Social Interaction values: {sum(invalid_social)}")
data.loc[invalid_social, 'Social Interaction'] = data['Social Interaction'].clip(0, 5)

# Validate Sleep Quality (1-10)
invalid_sleep = ~data['Sleep Quality'].between(1, 10)
print(f"Invalid Sleep Quality values: {sum(invalid_sleep)}")
data.loc[invalid_sleep, 'Sleep Quality'] = data['Sleep Quality'].clip(1, 10)

# Validate Daily Steps (max 11000)
invalid_steps = data['Daily Steps'] > 11000
print(f"Invalid Daily Steps values: {sum(invalid_steps)}")
data.loc[invalid_steps, 'Daily Steps'] = 11000

# Validate Calories Burned (max 2900)
invalid_calories = data['Calories Burned'] > 2900
print(f"Invalid Calories Burned values: {sum(invalid_calories)}")
data.loc[invalid_calories, 'Calories Burned'] = 2900

print("\nPreprocessing complete.")
print("-" * 50)
print(f"Final Shape: {data.shape}")
print("-" * 50)
print(data.head())

# Standardize numeric columns
standardize_columns = ['Sleep Quality', 'Daily Steps', 'Calories Burned', 'Heart Rate', 'Sleep Duration']
data[standardize_columns] = (data[standardize_columns] - data[standardize_columns].mean()) / data[standardize_columns].std()
print("\nStandardization complete.")
print("-" * 50)
data['Physical Activity Level'] = (data['Physical Activity Level'] - data['Physical Activity Level'].min()) / \
                                  (data['Physical Activity Level'].max() - data['Physical Activity Level'].min())
data['Social Interaction'] = (data['Social Interaction'] - data['Social Interaction'].min()) / \
                              (data['Social Interaction'].max() - data['Social Interaction'].min())

# Calculate Anxiety Level
data['Anxiety_Level'] = np.clip(
    1 - (data['Sleep Quality'] / 10) * 0.25 +
    (data['Physical Activity Level'] / 2) * 0.15 +
    (1 - data['Social Interaction'] / 4) * 0.25 +
    (data['Heart Rate'] - 60) / 50 * 0.15 +
    np.random.normal(0, 0.35, len(data)),
    0, 1
)
# Calculate Depression Level
data['Depression_Level'] = np.clip(
    1 - (data['Sleep Quality'] / 10) * 0.25 +
    (1 - data['Physical Activity Level'] / 2) * 0.15 +
    (1 - data['Social Interaction'] / 4) * 0.25 +
    (1 - (data['Heart Rate'] - 60) / 50) * 0.15 +
    np.random.normal(0, 0.35, len(data)),
    0, 1
)

print("Mean of Standardized Columns:")
print(data[standardize_columns].mean())
print("Standard Deviation of Standardized Columns:")
print(data[standardize_columns].std())
# Check proportion of clipped values
print("Clipped Anxiety Level:\n", (data['Anxiety_Level'] == 0).sum(), "values at 0,", (data['Anxiety_Level'] == 1).sum(), "values at 1")
print("Clipped Depression Level:\n", (data['Depression_Level'] == 0).sum(), "values at 0,", (data['Depression_Level'] == 1).sum(), "values at 1")

# Create scalers
age_scaler = StandardScaler()
sleep_quality_scaler = StandardScaler()
daily_steps_scaler = StandardScaler()
calories_burned_scaler = StandardScaler()
heart_rate_scaler = StandardScaler()
sleep_duration_scaler = StandardScaler()
social_interaction_scaler = StandardScaler()

# Create a copy of the original data and scale the features
scaled_data = data.copy()

# Convert and scale each feature
print("Scaling features...")

# Age
scaled_data['Age'] = age_scaler.fit_transform(data[['Age']].astype('float64'))

# Sleep Quality
scaled_data['Sleep Quality'] = sleep_quality_scaler.fit_transform(data[['Sleep Quality']].astype('float64'))

# Daily Steps
scaled_data['Daily Steps'] = daily_steps_scaler.fit_transform(data[['Daily Steps']].astype('float64'))

# Calories Burned
scaled_data['Calories Burned'] = calories_burned_scaler.fit_transform(data[['Calories Burned']].astype('float64'))

# Heart Rate
scaled_data['Heart Rate'] = heart_rate_scaler.fit_transform(data[['Heart Rate']].astype('float64'))

# Sleep Duration
scaled_data['Sleep Duration'] = sleep_duration_scaler.fit_transform(data[['Sleep Duration']].astype('float64'))

# Social Interaction
scaled_data['Social Interaction'] = social_interaction_scaler.fit_transform(data[['Social Interaction']].astype('float64'))

features = ['Age', 'Sleep Quality', 'Daily Steps', 'Calories Burned', 'Heart Rate', 'Sleep Duration', 
            'Physical Activity Level', 'Medication Usage', 'Social Interaction']
target = ['Anxiety_Level', 'Depression_Level']

X = scaled_data[features]
y = scaled_data[target]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

model = LinearRegression()
model.fit(X_train, y_train)

y_predict = model.predict(X_test)
y_predict

y_predict_1d = y_predict[:, 0]
y_test_1d = y_test.iloc[:, 0].values
dataframe = pd.DataFrame({'Y_actual': y_test_1d, 'Y_predicted': y_predict_1d})
dataframe

# Create the scatter plot
plt.figure(figsize=(10, 6))
plt.scatter(X_test['Age'], y_test_1d, color='blue', label='Actual Values', alpha=0.5)
plt.scatter(X_test['Age'], y_predict_1d, color='red', label='Predicted Values', alpha=0.5)

# Plot the linear regression line
plt.plot(X_test['Age'], y_predict_1d, color='green', label='Linear Regression Line')

# Add labels, legend, and title
plt.xlabel("Feature Values")
plt.ylabel("Target Values")
plt.title("Scatter Plot with Linear Regression Line")
plt.legend()

# Display the plot
plt.show()

r2_score(y_test_1d, y_predict_1d)
print(f"R2 Score: {round(r2_score(y_test_1d, y_predict_1d), 4) * 100}")

from sklearn.metrics import mean_absolute_error
mean_absolute_error(y_test_1d, y_predict_1d)
print(f"Mean Absolute Error: {(mean_absolute_error(y_test_1d, y_predict_1d)):.2f}")

mean_squared_error(y_test_1d, y_predict_1d)
print(f"Mean Squared Error: {mean_squared_error(y_test_1d, y_predict_1d):.2f}")

rmse = np.sqrt(mean_squared_error(y_test_1d, y_predict_1d))
print(f"Root Mean Squared Error: {rmse:.2f}")

decision_tree_model = DecisionTreeRegressor(random_state=42)
random_forest_model = RandomForestRegressor(random_state=42)

decision_tree_model.fit(X_train, y_train)
random_forest_model.fit(X_train, y_train)

y_predict_decision_tree = decision_tree_model.predict(X_test)
y_predict_random_forest = random_forest_model.predict(X_test)

rmse_decision_tree = np.sqrt(mean_squared_error(y_test, y_predict_decision_tree))
rmse_random_forest = np.sqrt(mean_squared_error(y_test, y_predict_random_forest))

rank_models = {
    'Linear Regression': rmse,
    'Decision Tree': rmse_decision_tree,
    'Random Forest': rmse_random_forest
}

sort_the_model = sorted(rank_models.items(), key=lambda x: x[1])

print("RMSE Scores(Highest to Lowest):")
for model, rmse_score in sort_the_model:
    print(f"{model}: {rmse_score:.2f}")

save_model = {
    'model': random_forest_model,
    'label_encoders': {
        'Physical Activity Level': physical_label_encoder, 
        'Medication Usage': medication_label_encoder
        },
    'scalers': {
        'Age': age_scaler,
        'Sleep Quality': sleep_quality_scaler,
        'Daily Steps': daily_steps_scaler,
        'Calories Burned': calories_burned_scaler,
        'Heart Rate': heart_rate_scaler,
        'Sleep Duration': sleep_duration_scaler,
        'Social Interaction': social_interaction_scaler
        },
    'features': features
}
with open('mental_health_model.pkl', 'wb') as file:
    pickle.dump(save_model, file)